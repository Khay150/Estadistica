hist(salchichas$CALORIAS[salchichas$TIPO == "B"],
main = "Calorías - Tipo B", xlab = "Calorías", col = "lightgreen")
hist(salchichas$CALORIAS[salchichas$TIPO == "C"],
main = "Calorías - Tipo C", xlab = "Calorías", col = "lightpink")
# Histogramas separados
par(mfrow = c(1, 3))  # 3 gráficos lado a lado
hist(salchichas$CALORIAS[salchichas$TIPO == "A"],
main = "Calorías - Tipo A", xlab = "Calorías", col = "lightblue")
hist(salchichas$CALORIAS[salchichas$TIPO == "B"],
main = "Calorías - Tipo B", xlab = "Calorías", col = "lightgreen")
hist(salchichas$CALORIAS[salchichas$TIPO == "C"],
main = "Calorías - Tipo C", xlab = "Calorías", col = "lightpink")
# Histogramas separados
par(mfrow = c(1, 3))  # 3 gráficos lado a lado
hist(salchichas$CALORIAS[salchichas$TIPO == "A"],
main = "Calorías - Tipo A", xlab = "Calorías", col = "lightblue")
hist(salchichas$CALORIAS[salchichas$TIPO == "B"],
main = "Calorías - Tipo B", xlab = "Calorías", col = "lightgreen")
hist(salchichas$CALORIAS[salchichas$TIPO == "C"],
main = "Calorías - Tipo C", xlab = "Calorías", col = "lightpink")
par(mfrow = c(1, 1)) # reset layout
boxplot(CALORIAS ~ TIPO, data = salchichas,
main = "Boxplots de Calorías",
xlab = "Tipo de salchicha", ylab = "Calorías",
col = c("lightblue", "lightgreen", "lightpink"))
boxplot(SODIO ~ TIPO, data = salchichas,
main = "Boxplots de Sodio",
xlab = "Tipo de salchicha", ylab = "Sodio",
col = c("lightblue", "lightgreen", "lightpink"))
# Leer los datos
datos <- read.table("estudiantes.txt", header = TRUE)
View(datos)
# Separar los grupos
grupo1 <- datos$GRUPO1
grupo2 <- datos$GRUPO2
# Histograma con curva normal para Grupo 1
hist(grupo1, breaks=10, probability=TRUE, col="lightblue",
main="Histograma Grupo 1", xlab="Concentración de NO3 (µg/l)")
curve(dnorm(x, mean=mean(grupo1), sd=sd(grupo1)), add=TRUE, col="red", lwd=2)
# Histograma con curva normal para Grupo 2
hist(grupo2, breaks=10, probability=TRUE, col="lightgreen",
main="Histograma Grupo 2", xlab="Concentración de NO3 (µg/l)")
curve(dnorm(x, mean=mean(grupo2), sd=sd(grupo2)), add=TRUE, col="red", lwd=2)
qqnorm(grupo1, main="QQPlot Grupo 1", col="blue")
qqline(grupo1, col="red", lwd=2)
qqnorm(grupo2, main="QQPlot Grupo 2", col="green")
qqline(grupo2, col="red", lwd=2)
summary(grupo1)
summary(grupo2)
sd(grupo1)
sd(grupo2)
# Boxplots paralelos
boxplot(grupo1, grupo2, names=c("Grupo 1","Grupo 2"),
main="Boxplots de concentración de NO3", col=c("lightblue","lightgreen"),
ylab="Concentración de NO3 (µg/l)")
# Cargar datos
# Leer los datos
datos <- read.table("nubes.txt", header = TRUE)
# a)
# Separar los grupos
controles  <- datos$CONTROLES
tratadas <- datos$TRATADAS
boxplot(controles, tratadas,
names = c("Controles", "Tratadas"),
main = "Boxplots paralelos: Nubes control vs tratadas",
ylab = "Agua caída (mm)",
col = c("lightblue", "lightgreen"))
# Función auxiliar para graficar histograma con densidad normal
hist_con_normal <- function(x, titulo){
hist(x, probability = TRUE, main = titulo, col = "lightgray", border = "white")
lines(density(x), col = "blue", lwd = 2)
curve(dnorm(x, mean=mean(x), sd=sd(x)),
col="red", lwd=2, add=TRUE)
}
# Histogramas
par(mfrow=c(2,2))
hist_con_normal(controles, "Histograma Controles")
hist_con_normal(tratadas, "Histograma Tratadas")
# Histograma con curva normal para Grupo 1
hist(controles, breaks=10, probability=TRUE, col="lightblue",
main="Histograma Controles", xlab="Agua Caida (L)")
curve(dnorm(x, mean=mean(controles), sd=sd(controles)), add=TRUE, col="red", lwd=2)
# Histograma con curva normal para Grupo 2
hist(tratadas, breaks=10, probability=TRUE, col="lightgreen",
main="Histograma Tratadas", xlab="Agua Caida (L)")
curve(dnorm(x, mean=mean(tratadas), sd=sd(tratadas)), add=TRUE, col="red", lwd=2)
# Histograma con curva normal para Grupo 1
hist(controles, breaks=10, probability=TRUE, col="lightblue",
main="Histograma Controles", xlab="Agua Caida (L)")
curve(dnorm(x, mean=mean(controles), sd=sd(controles)), add=TRUE, col="red", lwd=2)
# Histograma con curva normal para Grupo 2
hist(tratadas, breaks=10, probability=TRUE, col="lightgreen",
main="Histograma Tratadas", xlab="Agua Caida (L)")
curve(dnorm(x, mean=mean(tratadas), sd=sd(tratadas)), add=TRUE, col="red", lwd=2)
par(mfrow = c(1, 2))
# Histograma con curva normal para Grupo 1
hist(controles, breaks=10, probability=TRUE, col="lightblue",
main="Histograma Controles", xlab="Agua Caida (L)")
curve(dnorm(x, mean=mean(controles), sd=sd(controles)), add=TRUE, col="red", lwd=2)
# Histograma con curva normal para Grupo 2
hist(tratadas, breaks=10, probability=TRUE, col="lightgreen",
main="Histograma Tratadas", xlab="Agua Caida (L)")
curve(dnorm(x, mean=mean(tratadas), sd=sd(tratadas)), add=TRUE, col="red", lwd=2)
# Histograma con curva normal para Grupo 1
hist(controles, breaks=10, probability=TRUE, col="lightblue",
main="Histograma Controles", xlab="Agua Caida (L)")
curve(dnorm(x, mean=mean(controles), sd=sd(controles)), add=TRUE, col="red", lwd=2)
# Histograma con curva normal para Grupo 1
hist(controles, breaks=10, probability=TRUE, col="lightblue",
main="Histograma Controles", xlab="Agua Caida (L)")
lines(density(controles), col="blue", lwd=2)
curve(dnorm(x, mean=mean(controles), sd=sd(controles)), add=TRUE, col="red", lwd=2)
par(mfrow = c(1, 2))
# Histograma con curva normal para Grupo 1
hist(controles, breaks=10, probability=TRUE, col="lightblue",
main="Histograma Controles", xlab="Agua Caida (L)")
lines(density(controles), col="blue", lwd=2)
curve(dnorm(x, mean=mean(controles), sd=sd(controles)), add=TRUE, col="red", lwd=2)
# Histograma con curva normal para Grupo 2
hist(tratadas, breaks=10, probability=TRUE, col="lightgreen",
main="Histograma Tratadas", xlab="Agua Caida (L)")
lines(density(controles), col="blue", lwd=2)
curve(dnorm(x, mean=mean(tratadas), sd=sd(tratadas)), add=TRUE, col="red", lwd=2)
par(mfrow = c(1, 1))
# QQplots
qqnorm(controles, main="QQplot Controles"); qqline(controles, col="red")
qqnorm(tratadas, main="QQplot Tratadas"); qqline(tratadas, col="red")
# QQplots
par(mfrow = c(1, 2))
qqnorm(controles, main="QQplot Controles"); qqline(controles, col="red")
qqnorm(tratadas, main="QQplot Tratadas"); qqline(tratadas, col="red")
par(mfrow = c(1, 2))
hist(log_controles, breaks=10, probability=TRUE, col="lightblue",
main="Histograma Log Controles", xlab="Agua Caida (L)")
log_controles <- log(controles)
log_tratadas <- log(tratadas)
# Histogramas con log
par(mfrow = c(1, 2))
hist(log_controles, breaks=10, probability=TRUE, col="lightblue",
main="Histograma Log Controles", xlab="Agua Caida (L)")
lines(density(log_controles), col="blue", lwd=2)
curve(dnorm(x, mean=mean(log_controles), sd=sd(log_controles)), add=TRUE, col="red", lwd=2)
hist(log_tratadas, breaks=10, probability=TRUE, col="lightgreen",
main="Histograma Log Tratadas", xlab="Agua Caida (L)")
lines(density(controles), col="blue", lwd=2)
curve(dnorm(x, mean=mean(log_tratadas), sd=sd(log_tratadas)), add=TRUE, col="red", lwd=2)
par(mfrow = c(1, 1))
# Histogramas con log
par(mfrow = c(1, 2))
hist(log_controles, breaks=10, probability=TRUE, col="lightblue",
main="Histograma Log Controles", xlab="Agua Caida (L)")
lines(density(log_controles), col="blue", lwd=2)
curve(dnorm(x, mean=mean(log_controles), sd=sd(log_controles)), add=TRUE, col="red", lwd=2)
hist(log_tratadas, breaks=10, probability=TRUE, col="lightgreen",
main="Histograma Log Tratadas", xlab="Agua Caida (L)")
lines(density(log_tratadas), col="blue", lwd=2)
curve(dnorm(x, mean=mean(log_tratadas), sd=sd(log_tratadas)), add=TRUE, col="red", lwd=2)
# QQplots con log
qqnorm(log_controles, main="QQplot Log(Controles)"); qqline(log_controles, col="red")
qqnorm(log_tratadas, main="QQplot Log(Tratadas)"); qqline(log_tratadas, col="red")
boxplot(log_controles, log_tratadas,
names = c("Log(Controles)", "Log(Tratadas)"),
main = "Boxplots paralelos con log",
ylab = "log(Agua caída)",
col = c("lightblue", "lightgreen"))
df <- read.csv("data credit card.csv", stringsAsFactors = FALSE)
df <- read.csv("data credit card.csv", stringsAsFactors = FALSE)
df <- read.csv("data_credit_card.csv", stringsAsFactors = FALSE)
str(df)              # debería mostrar 4 numéricas
nrow(df)             # n = 500
vars <- c("purchases","credit_limit","purchases_freq","tenure")
par(mfrow = c(2,2), mar=c(4,4,3,1))
for (v in vars) {
plot(ecdf(df[[v]]),
main = paste("ECDF -", v),
xlab = v, ylab = "F_n(x)")
grid()
}
str(df)
par(mfrow = c(2,2), mar=c(4,4,4,4))
for (v in vars) {
plot(ecdf(df[[v]]),
main = paste("ECDF -", v),
xlab = v, ylab = "F_n(x)")
grid()
}
par(mfrow = c(1,2))
hist(df$credit_limit, probability = TRUE, breaks = "FD",
col = "lightblue", border = "white",
main = "Histograma credit_limit", xlab = "credit_limit")
lines(density(df$credit_limit, na.rm = TRUE), lwd = 2)
grid()
par(mfrow = c(1,2))
hist(df$credit_limit, probability = TRUE, breaks = "FD",
col = "lightblue", border = "white",
main = "Histograma credit_limit", xlab = "credit_limit")
lines(density(df$credit_limit, na.rm = TRUE), lwd = 2)
grid()
plot(density(df$credit_limit, na.rm = TRUE),
main = "Densidad kernel - credit_limit", xlab = "credit_limit", lwd = 2)
rug(df$credit_limit)
par(mfrow = c(1,2))
hist(df$credit_limit, probability = TRUE, breaks = "FD",
col = "lightblue", border = "black",
main = "Histograma credit_limit", xlab = "credit_limit")
lines(density(df$credit_limit, na.rm = TRUE), lwd = 2, color = "blue")
grid()
plot(density(df$credit_limit, na.rm = TRUE),
main = "Densidad kernel - credit_limit", xlab = "credit_limit", lwd = 2)
rug(df$credit_limit)
par(mfrow = c(1,2))
hist(df$credit_limit, probability = TRUE, breaks = "FD",
col = "lightblue", border = "black",
main = "Histograma credit_limit", xlab = "credit_limit")
lines(density(df$credit_limit, na.rm = TRUE), lwd = 2, col = "blue")
grid()
plot(density(df$credit_limit, na.rm = TRUE),
main = "Densidad kernel - credit_limit", xlab = "credit_limit", lwd = 2)
rug(df$credit_limit)
par(mfrow = c(1,2))
hist(df$credit_limit, probability = TRUE, breaks = "FD",
col = "lightblue", border = "black",
main = "Histograma credit_limit", xlab = "credit_limit")
lines(density(df$credit_limit, na.rm = TRUE), lwd = 2, col = "blue")
grid()
plot(density(df$credit_limit, na.rm = TRUE),
main = "Densidad kernel - credit_limit", xlab = "credit_limit", lwd = 2, type = "p")
rug(df$credit_limit)
par(mfrow = c(1,2))
hist(df$credit_limit, probability = TRUE, breaks = "FD",
col = "lightblue", border = "black",
main = "Histograma credit_limit", xlab = "credit_limit")
lines(density(df$credit_limit, na.rm = TRUE), lwd = 2, col = "blue")
grid()
plot(density(df$credit_limit, na.rm = TRUE),
main = "Densidad kernel - credit_limit", xlab = "credit_limit", lwd = 2, type = "l")
rug(df$credit_limit)
par(mfrow = c(1,2))
hist(df$credit_limit, probability = TRUE, breaks = "FD",
col = "lightblue", border = "black",
main = "Histograma credit_limit", xlab = "credit_limit")
lines(density(df$credit_limit, na.rm = TRUE), lwd = 2, col = "blue")
grid()
plot(density(df$credit_limit, na.rm = TRUE),
main = "Densidad kernel - credit_limit", xlab = "credit_limit", lwd = 2, type = "l")
par(mfrow = c(1,2))
hist(df$credit_limit, probability = TRUE, breaks = "FD",
col = "lightblue", border = "black",
main = "Histograma credit_limit", xlab = "credit_limit")
lines(density(df$credit_limit, na.rm = TRUE), lwd = 2, col = "blue")
grid()
plot(density(df$credit_limit, na.rm = TRUE),
main = "Densidad kernel - credit_limit", xlab = "credit_limit", lwd = 2, type = "l")
rug(df$credit_limit)
par(mfrow = c(1,1))
prop_tenure <- prop.table(table(df$tenure))
barplot(prop_tenure, main = "Tenure - Frecuencias relativas",
ylab = "Proporción", xlab = "Meses", col = "gray80", border = "white")
par(mfrow = c(1,1))
prop_tenure <- prop.table(table(df$tenure))
barplot(prop_tenure, main = "Tenure - Frecuencias relativas",
ylab = "Proporción", xlab = "Meses", col = "lightblue", border = "gray80")
par(mfrow = c(1,1))
prop_tenure <- prop.table(table(df$tenure))
barplot(prop_tenure, main = "Tenure - Frecuencias relativas",
ylab = "Proporción", xlab = "Meses", col = "lightblue", border = "black")
medidas_pos <- function(x) {
c(
mean      = mean(x, na.rm = TRUE),
median    = median(x, na.rm = TRUE),
mean_0.1 = mean(x, trim = 0.10, na.rm = TRUE)
)
}
pos_tbl <- t(sapply(df[vars], medidas_pos))
round(pos_tbl, 3)
colors()
dispersion <- function(x) {
q <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE, names = FALSE)
c(
q25 = q[1],
q75 = q[2],
IQR = IQR(x, na.rm = TRUE),
MAD = mad(x, constant = 1, na.rm = TRUE)
)
}
disp_tbl <- t(sapply(df[vars], dispersion))
round(disp_tbl, 3)
par(mfrow = c(2,2), mar=c(4,4,3,1))
colors <- c("lightblue", "lightgreen", "lightpink", "lightgoldenrod")
i <- 1
for (v in vars) {
boxplot(df[[v]], main = paste("Boxplot -", v), col = colors[i], horizontal = TRUE)
grid()
i <- i + 1
}
disp_tbl <- t(sapply(df[vars], dispersion))
round(disp_tbl, 3)
par(mfrow = c(1,1))
colors <- c("lightblue", "lightgreen", "lightpink", "lightgoldenrod")
i <- 1
for (v in vars) {
boxplot(df[[v]], main = paste("Boxplot -", v), col = colors[i], horizontal = TRUE)
grid()
i <- i + 1
}
dispersion <- function(x) {
q <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE, names = FALSE)
c(
q25 = q[1],
q75 = q[2],
IQR = IQR(x, na.rm = TRUE),
MAD = mad(x, constant = 1, na.rm = TRUE)
)
}
disp_tbl <- t(sapply(df[vars], dispersion))
round(disp_tbl, 3)
par(mfrow = c(2,2))
colors <- c("lightblue", "lightgreen", "lightpink", "lightgoldenrod")
i <- 1
for (v in vars) {
boxplot(df[[v]], main = paste("Boxplot -", v), col = colors[i], horizontal = TRUE)
grid()
i <- i + 1
}
standar_desviation <- function(x) {
c(
sd        = sd(x, na.rm = TRUE),
)
}
sd_tbl <- t(sapply(df[vars], standar_desviation))
standar_desviation <- function(x) {
c(
sd        = sd(x, na.rm = TRUE)
)
}
sd_tbl <- t(sapply(df[vars], standar_desviation))
round(sd_tbl, 3)
sd_values <- c()
for (i in 1:4) {
c(
sd_values = c(sd_values, round(sd(vars[i], na.rm = TRUE), 3))
)
}
sd_values
sd_values <- c(round(sd(vars[1], na.rm = TRUE), 3))
for (i in 2:4) {
c(
sd_values = c(sd_values, round(sd(vars[i], na.rm = TRUE), 3))
)
}
round(sd(vars[1], na.rm = TRUE), 3)
sd(vars[1], na.rm = TRUE)
sd_values <- c()
for (i in 1:4) {
c(
sd_values = c(sd_values, round(sd(vars[[i]], na.rm = TRUE), 3))
)
}
sd_values <- c()
for (i in 1:4) {
c(
sd_values = c(sd_values, round(sd(df[vars[i]], na.rm = TRUE), 3))
)
}
sd_values <- c()
for (i in 1:4) {
colname <- vars[i]
sd_values <- c(sd_values, round(sd(df[[colname]], na.rm = TRUE), 3))
}
sd_values
resumen_central <- data.frame(
Estadístico = c("Desviacion Estandar"),
purchases = c(sd_values[1]),
credit_limit  = c(sd_values[2]),
purchases_freq  = c(sd_values[3]),
tenure  = c(sd_values[4])
)
print(resumen_central)
resumen_central <- data.frame(
Estadístico = c(""),
purchases = c(sd_values[1]),
credit_limit  = c(sd_values[2]),
purchases_freq  = c(sd_values[3]),
tenure  = c(sd_values[4])
)
print(resumen_central)
resumen_central <- data.frame(
purchases = c(sd_values[1]),
credit_limit  = c(sd_values[2]),
purchases_freq  = c(sd_values[3]),
tenure  = c(sd_values[4])
)
print(resumen_central)
resumen_sd <- data.frame(
purchases = c(sd_values[1]),
credit_limit  = c(sd_values[2]),
purchases_freq  = c(sd_values[3]),
tenure  = c(sd_values[4])
)
print(resumen_sd)
outlier_idx <- function(x) {
q1 <- quantile(x, 0.25, na.rm = TRUE)
q3 <- quantile(x, 0.75, na.rm = TRUE)
iqr <- q3 - q1
which(x < (q1 - 1.5*iqr) | x > (q3 + 1.5*iqr))
}
# Índices y conteos de atípicos por variable
out_list <- lapply(df[vars], outlier_idx)
sapply(out_list, length)
out_list
# Detección de atípicos
outlier_idx <- function(x) {
q1 <- quantile(x, 0.25, na.rm = TRUE)
q3 <- quantile(x, 0.75, na.rm = TRUE)
iqr <- q3 - q1
which(x < (q1 - 1.5*iqr) | x > (q3 + 1.5*iqr))
}
# Índices y conteos de atípicos por variable
out_list <- lapply(df[vars], outlier_idx)
sapply(out_list, length)
# Eliminar outliers
for (i in 1:4) {
v <- vars[i]
x <- df[[v]]
x[-out_list[[i]]]
}
out_list <- lapply(df[vars], outlier_idx)
sapply(out_list, length)
# g)
# Detección de atípicos
outlier_idx <- function(x) {
q1 <- quantile(x, 0.25, na.rm = TRUE)
q3 <- quantile(x, 0.75, na.rm = TRUE)
iqr <- q3 - q1
which(x < (q1 - 1.5*iqr) | x > (q3 + 1.5*iqr))
}
# Índices y conteos de atípicos por variable
out_list <- lapply(df[vars], outlier_idx)
sapply(out_list, length)
# Eliminar outliers
sin_atipicos <- lapply(seq_along(vars),
function(i){
v <- vars[i]
x <- df[[v]]
x[-out_list[[i]]]
})
View(sin_atipicos)
View(sin_atipicos)
View(sin_atipicos)
names(sin_atipicos) <- var
names(sin_atipicos) <- vars
View(sin_atipicos)
pos_tbl_no <- t(sapply(sin_atipicos, medidas_pos))
disp_tbl_no <- t(sapply(sin_atipicos, dispersion))
pos_tbl_no
disp_tbl_no
sin_atipicos["tenure"]
sd_values <- c()
for (i in 1:4) {
colname <- vars[i]
sd_values <- c(sd_values, round(sd(sin_atipicos[[colname]], na.rm = TRUE), 3))
}
resumen_sd <- data.frame(
purchases = c(sd_values[1]),
credit_limit  = c(sd_values[2]),
purchases_freq  = c(sd_values[3]),
tenure  = c(sd_values[4])
)
print(resumen_sd)
View(df)
sin_atipicos["purchase_freq"]
df["purchase_freq"]
View(df)
df["purchases_freq"]
sin_atipicos["purchases_freq"]
quantile(df["purchases_freq"], 0.25, na.rm = TRUE)
q1 = quantile(df["purchases_freq"], 0.25, na.rm = TRUE)
q3 = quantile(df["purchases_freq"], 0.75, na.rm = TRUE)
q1
q3
IQR
iqr
iqr <- q3 - q1
iqr
q1 - 1.5*iqr
x > (q3 + 1.5*iqr)
q1 - 1.5*iqr
q3 + 1.5*iqr)
q3 + 1.5*iqr
View(df)
df["purchases_freq"]
which(x < (q1 - 1.5*iqr) | x > (q3 + 1.5*iqr))
sin_atipicos["tenure"]
sin_atipicos["tenure"]
colors <- c("lightblue", "lightgreen", "lightpink", "lightgoldenrod")
i <- 1
for (v in vars) {
boxplot(sin_atipicos[[v]], main = paste("Boxplot -", v), col = colors[i], horizontal = TRUE)
grid()
i <- i + 1
}
# Paquete para leer Excel
library(readxl)
datos <- read_excel("ciclocombinado.xlsx")
install.packages("readxl")
# Paquete para leer Excel
library(readxl)
# Paquete para leer Excel
library(readxl)
# Leer datos
datos <- read_excel("ciclocombinado.xlsx")
View(datos)
